#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// === definitions

// path constants
const char *test_path = "./src/01/test.txt";
const char *main_path = "./src/01/main.txt";

// number word object
typedef struct {
  char number;
  int start_pos;
} number_word;

// hoisted function signatures
void free_obj(number_word *obj);
number_word *make_obj(int start_pos, char number);
number_word **read_line(char *line);
int calc_number(const char *file_path);
number_word *string_to_num(int start_pos, char *str);

//
// === main ===
int main() {
  int test_num = calc_number(test_path);
  int main_num = calc_number(main_path);

  printf("Test calculation is %d\n", test_num);
  printf("Main calculation is %d\n", main_num);
}

//
// === functions ===

// frees the number_word object
void free_obj(number_word *obj) { free(obj); }

// allocates memory for number_word object
number_word *make_obj(int start_pos, char number) {
  number_word *new_obj = malloc(sizeof(number_word));
  if (new_obj == NULL) {
    printf("Unable to allocate memory for new object\n");
    return NULL;
  }

  new_obj->start_pos = start_pos;
  new_obj->number = number;
  return new_obj;
};

// converts a spelled number to a string
number_word *string_to_num(int start_pos, char *str) {
  if (strcmp(str, "one") == 0) {
    return make_obj(start_pos, '1');
  } else if (strcmp(str, "two") == 0) {
    return make_obj(start_pos, '2');
  } else if (strcmp(str, "three") == 0) {
    return make_obj(start_pos, '3');
  } else if (strcmp(str, "four") == 0) {
    return make_obj(start_pos, '4');
  } else if (strcmp(str, "five") == 0) {
    return make_obj(start_pos, '5');
  } else if (strcmp(str, "six") == 0) {
    return make_obj(start_pos, '6');
  } else if (strcmp(str, "seven") == 0) {
    return make_obj(start_pos, '7');
  } else if (strcmp(str, "eight") == 0) {
    return make_obj(start_pos, '8');
  } else if (strcmp(str, "nine") == 0) {
    return make_obj(start_pos, '9');
  } else {
    printf("Unable to identify the following number: %s\n", str);
    return NULL;
  }
}

//
number_word **read_line(char *line) {
  // returns two num_objs
  number_word *first_digit;
  number_word *first_spelled;
  number_word *second_digit;
  number_word *second_spelled;
  int line_len = (int)strlen(line);

  // first letter
  // find both first letter and first number then return both
  for (int i = 0; i < line_len; i++) {
    if (isalpha(line[i])) {
      char *buffer = malloc(sizeof(char) * 10);

      for (int j = i; j < line_len; j++) {
        strncpy(buffer, line + i, i - j);
        if (isdigit(line[j])) {
          break;
        }

        first_spelled = string_to_num(i, buffer);

        if (first_spelled != NULL) {
        }
      }
    }
  }
  return first_digit;
}

int calc_number(const char *file_path) {
  char *numbers[] = {"zero", "one", "two",   "three", "four",
                     "five", "six", "seven", "eight", "nine"};

  FILE *file = fopen(file_path, "r");

  if (file == NULL) {
    printf("Unable to open file: %s\n", file_path);
    return -1;
  }

  char line[256]; // buffer for each line of the
  int sum = 0;

  // TODO: add spelled out digits
  while (fgets(line, sizeof(line), file)) {
    number_word *first;
    number_word *second;

    int line_len = (int)strlen(line);

    // get first digit number
    for (int i = 0; i < line_len; i++) {
      char nchar = line[i];
      if (isdigit(nchar)) {
        first = nchar;
        break;
      }
    }

    // check 5 letters for spelled number
    char letters[6];
    for (int i = 0; i < 5; i++) {
      letters[i] = line[i];
      // first = string_to_num(letters);
    }

    // get second number
    char last_char = line[0];
    for (int i = 0; i < line_len; i++) {
      char curr_char = line[i];

      if (isdigit(curr_char)) {
        last_char = curr_char;
      }
    }
    second = last_char;

    // check for the last letters

    // combine them together #1,#2
    char cnumber[10] = "00";
    cnumber[0] = first;
    cnumber[1] = second;
    int number = atoi(cnumber);

    if (number == 0) {
      printf("Unable to convert %s to integer\n", cnumber);
      return -1;
    }

    // add to sum var
    sum += number;
  }

  fclose(file);

  printf("%d is the sum of the digits.\n", sum);
  return sum;
}
